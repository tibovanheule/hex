{"version":3,"sources":["hex.js","index.js"],"names":["App","props","state","svg","undefined","post","bind","makeBoard","list","this","Data","fetch","method","headers","body","then","res","text","data","setState","x","y","code","String","fromCharCode","parseInt","tiles","coor","map","val","console","log","length","join","Dom","coordinates","Array","from","getElementsByTagName","filter","hasAttribute","getAttribute","svgXML","onSVGReady","selector","onClick","dom","target","baseVal","value","Component","ReactDOM","render","document","getElementById"],"mappings":"2NAGqBA,E,kDAIjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,SAAKC,GACnB,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBALG,E,gEAUfG,KAAKJ,KAAK,kF,2BAGTK,GAAO,IAAD,OACPC,MAAM,0CAA2C,CAC7CC,OAAQ,OACRC,QAAS,CACL,eAAgB,cAEpBC,KAAMJ,IACPK,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAAQF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAChB,IAAKe,S,gCAGxDE,EAAEC,GACR,IAAIC,EAAOC,OAAOC,aAAaC,SAASL,GAAK,IAC7CC,EAAII,SAASJ,GAAK,EAClB,IAAIK,EAAQjB,KAAKP,MAAMyB,KAAKC,KAAI,SAACC,GAAwB,OAAjBC,QAAQC,IAAIF,GAAW,QAAN,OAAeN,OAAOC,aAAaK,EAAI,GAAK,KAA5C,OAAkDA,EAAI,GAAtD,gBAAgEA,EAAI,OAC7HpB,KAAKJ,KAAL,0DAESI,KAAKP,MAAMyB,KAAKK,OAAO,EAFhC,qBAGEN,EAAMO,KAAK,MAHb,yBAIMX,GAJN,OAIaD,EAJb,0E,2BASCa,GACD,IAAIC,EAAcC,MAAMC,KAAKH,EAAII,qBAAqB,QAAQC,QAAO,SAACV,GAAD,OAAOA,EAAIW,aAAa,WAASZ,KAAI,SAACC,GAAD,MAAO,CAACJ,SAASI,EAAIY,aAAa,MAAMhB,SAASI,EAAIY,aAAa,MAAM,EAAEZ,EAAIY,aAAa,YACrMhC,KAAKU,SAAS,CAACQ,KAAKQ,M,+BAGd,IAAD,OAEL,OACI,kCACwB/B,IAAnBK,KAAKP,MAAMC,KAAqB,2CACbC,IAAnBK,KAAKP,MAAMC,KAAqB,kBAAC,YAAD,CAAWuC,OAAQjC,KAAKP,MAAMC,IAAKwC,WAAYlC,KAAKD,MACjF,kBAAC,WAAD,CAAUoC,SAAU,MAAOC,QAAS,SAACC,GAAD,OAAO,EAAKvC,UAAUuC,EAAIC,OAAO3B,EAAE4B,QAAQC,MAAMH,EAAIC,OAAO1B,EAAE2B,QAAQC,gB,GAnD7FC,a,MCEjCC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U","file":"static/js/main.339afb44.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {SvgLoader,SvgProxy} from \"react-svgmt\";\r\n\r\nexport default class App extends Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {svg: undefined};\r\n        this.post = this.post.bind(this);\r\n        this.makeBoard = this.makeBoard.bind(this);\r\n        this.list = this.list.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.post('size: 5 * 5\\nturn: blue\\ntiles: 0\\nstate: undecided\\norientation: red * blue')\r\n    }\r\n\r\n    post(Data) {\r\n        fetch(\"https://hex.tibovanheule.space/move/svg\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: Data\r\n        }).then((res)=>res.text()).then((data) => this.setState({svg: data}))\r\n    }\r\n\r\n    makeBoard(x,y){\r\n        let code = String.fromCharCode(parseInt(x) + 65);\r\n        y = parseInt(y) + 1;\r\n        let tiles = this.state.coor.map((val)=>{console.log(val);return `    (${String.fromCharCode(val[0] + 65)}${val[1]}) -> ${val[2]}`})\r\n        this.post(`size: 5 * 5\r\n        turn: blue\r\n        tiles: ${this.state.coor.length+1}\r\n        ${tiles.join(\"\\n\")}\r\n           (${code}${y}) -> red\r\n        state: undecided\r\n        orientation: red * blue`);\r\n    }\r\n\r\n    list(Dom){\r\n        let coordinates = Array.from(Dom.getElementsByTagName(\"use\")).filter((val)=>val.hasAttribute(\"fill\")).map((val)=>[parseInt(val.getAttribute(\"x\")),parseInt(val.getAttribute(\"y\"))+1,val.getAttribute(\"fill\")]);\r\n        this.setState({coor:coordinates});\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.state.svg === undefined && <p>LOADING</p>}\r\n                {this.state.svg !== undefined && <SvgLoader svgXML={this.state.svg} onSVGReady={this.list}>\r\n                    <SvgProxy selector={\"use\"} onClick={(dom)=>this.makeBoard(dom.target.x.baseVal.value,dom.target.y.baseVal.value)} />\r\n                </SvgLoader>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './hex';\r\nimport \"./style.css\"\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}